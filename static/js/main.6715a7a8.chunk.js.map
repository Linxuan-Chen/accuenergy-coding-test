{"version":3,"sources":["Components/Map/Map.js","Components/Map/Time/Time.js","Utils/Constants.js","Components/Map/Time/TimeContainer.js","Components/Map/MapContainer.js","App.js","reportWebVitals.js","index.js","Components/Map/Map.module.scss"],"names":["Map","props","className","style","map_wrapper","input_group","children","id","mapStyle","Time","timerUTC","timerLocalTime","GoogleMap","MyMarker","MyGeocoder","MyInfoWindow","myAPIKey","initialLocation","lat","lng","width","height","TimeContainer","state","utcTimeStamp","Math","round","Date","selectedLocation","previousSelectedLocation","selectedLocationTime","selectedLocationTimeZoneName","getTimeZone","fetch","then","res","json","data","setState","dstOffset","rawOffset","timeZoneName","status","alert","catch","setInterval","this","clearInterval","toUTCString","replace","PureComponent","GoogleMapLoader","Loader","apiKey","language","MapContainer","onSearchClick","searchKeyword","setMap","geocode","address","results","window","google","maps","Marker","position","geometry","location","map","setCenter","InfoWindow","content","formatted_address","open","onKeyUpHandler","e","keyCode","onSearchKeywordChange","target","value","onYourLocationClick","latLng","clientLocation","result","addListener","markerPosition","load","document","getElementById","center","zoom","Geocoder","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","search_box","type","onChange","onKeyUp","buttons","onClick","utcTime","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.6715a7a8.chunk.js","sourcesContent":["/*\r\n * @Author: Linxuan Chen\r\n * @Date: 2020-11-27 20:16:02\r\n * @LastEditTime: 2020-11-28 23:45:45\r\n * @Description: Representation component to display map related data\r\n */\r\n\r\nimport React from \"react\";\r\nimport style from \"./Map.module.scss\";\r\n\r\nexport default function Map(props) {\r\n  return (\r\n    <div className={style.map_wrapper}>\r\n      <div className=\"clear-float\">\r\n        <div className={style.input_group}>{props.children}</div>\r\n      </div>\r\n      <div id=\"map\" style={props.mapStyle}></div>\r\n    </div>\r\n  );\r\n}\r\n","/*\r\n * @Author: Linxuan Chen\r\n * @Date: 2020-11-28 18:29:36\r\n * @LastEditTime: 2020-11-28 23:45:02\r\n * @Description: Presenational component to display the time.\r\n */\r\nimport React from \"react\";\r\n\r\nexport default function Time(props) {\r\n  return <article >{props.children}</article>;\r\n}\r\n","/*\r\n * @Author: your name\r\n * @Date: 2020-11-28 17:53:30\r\n * @LastEditTime: 2020-11-28 23:51:02\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\repository\\accuenergy-coding-test\\src\\Utils\\Constants.js\r\n */\r\n//My Api key for consuming google APIs\r\nexport const myAPIKey = \"AIzaSyDN6-LfGwkjKY4nq9i0BZaWISOAs_criwI\";\r\n\r\n//Coordinates of location to initialize google map\r\nexport const initialLocation = {\r\n    lat: 43.774350125384466,\r\n    lng: -79.32607679210997,\r\n};\r\n\r\n//Width and height to initialize the google map\r\nexport const mapStyle = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n};","/*\r\n * @Author: Linxuan Chen\r\n * @Date: 2020-11-28 18:20:17\r\n * @LastEditTime: 2020-11-28 23:48:18\r\n * @Description: Container component to fetch time zone data from google time zone APIs\r\n */\r\nimport React, { PureComponent } from \"react\";\r\nimport Time from \"./Time\";\r\nimport { initialLocation } from \"../../../Utils/Constants\";\r\n\r\n//Containers for timers\r\nlet timerUTC, timerLocalTime;\r\n\r\nexport default class TimeContainer extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      utcTimeStamp: Math.round(new Date() / 1000),\r\n      selectedLocation: initialLocation,\r\n      previousSelectedLocation: initialLocation,\r\n      selectedLocationTime: null,\r\n      selectedLocationTimeZoneName: \"\",\r\n    };\r\n    /**\r\n     * @description: Fetch time zone data from google time zone APIs according to coordinates designated to a specified location,\r\n     * store data to local state, calcuate local time of selected location and store them to local state.\r\n     */\r\n    this.getTimeZone = () => {\r\n      fetch(\r\n        `https://maps.googleapis.com/maps/api/timezone/json?location=${this.state.selectedLocation.lat\r\n        },${this.state.selectedLocation.lng}&timestamp=${this.state.utcTimeStamp\r\n        }&key=${this.props.myAPIKey}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          this.setState({\r\n            selectedLocationTime:\r\n              data.dstOffset + data.rawOffset + this.state.utcTimeStamp,\r\n            selectedLocationTimeZoneName: data.timeZoneName,\r\n          });\r\n          if (data.status === \"ZERO_RESULTS\") {\r\n            alert(\r\n              \"No time zone data could be found for the specified position or time. Confirm that the request is for a location on land, and not over water.\"\r\n            );\r\n          }\r\n        })\r\n        .catch(() => {\r\n          alert(\r\n            \"Fail to get a response from google time zone API. Please check your network and try again.\"\r\n          );\r\n        });\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Set timers to support real-time clocks\r\n    timerUTC = setInterval(() => {\r\n      this.setState({\r\n        utcTimeStamp: this.state.utcTimeStamp + 1,\r\n      });\r\n    }, 1000);\r\n    if (this.state.selectedLocation) {\r\n      this.getTimeZone();\r\n      timerLocalTime = setInterval(() => {\r\n        this.setState({\r\n          selectedLocationTime: this.state.selectedLocationTime + 1,\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    this.setState({\r\n      previousSelectedLocation: this.state.selectedLocation,\r\n      selectedLocation: this.props.selectedLocation,\r\n    });\r\n    if (\r\n      this.state.previousSelectedLocation.lat !==\r\n      this.state.selectedLocation.lat &&\r\n      this.state.previousSelectedLocation.lng !==\r\n      this.state.selectedLocation.lng\r\n    ) {\r\n      this.getTimeZone();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(timerUTC);\r\n    clearInterval(timerLocalTime);\r\n  }\r\n  render() {\r\n    return (\r\n      <Time>\r\n        <section>\r\n          UTC Time: &nbsp;\r\n          {new Date(this.state.utcTimeStamp * 1000)\r\n            .toUTCString()\r\n            .replace(\"GMT\", \"(Coordinated Universal Time)\")}\r\n        </section>\r\n        <section>\r\n          Selected Location Time:&nbsp;\r\n          {new Date(new Date(this.state.selectedLocationTime * 1000))\r\n            .toUTCString()\r\n            .replace(\"GMT\", `(${this.state.selectedLocationTimeZoneName})`)}\r\n        </section>\r\n      </Time>\r\n    );\r\n  }\r\n}\r\n","/*\r\n * @Author: Linxuan Chen\r\n * @Date: 2020-11-27 20:17:35\r\n * @LastEditTime: 2020-11-29 00:01:05\r\n * @Description: Container component to fetch data from google map services.\r\n * @FilePath: \\repository\\accuenergy-coding-test\\src\\Components\\MapDisplay\\MapContainer.js\r\n */\r\nimport React, { PureComponent } from \"react\";\r\nimport Map from \"./Map\";\r\nimport TimeContainer from \"./Time/TimeContainer\";\r\nimport { myAPIKey, initialLocation, mapStyle } from \"../../Utils/Constants\";\r\nimport style from \"./Map.module.scss\";\r\nimport { Loader } from \"@googlemaps/js-api-loader\";\r\n\r\n//Loading google map using googlemaps js-api-loader\r\nconst GoogleMapLoader = new Loader({\r\n  apiKey: myAPIKey,\r\n  language: \"English\",\r\n});\r\n\r\n//Containers for instances created by google built-in constructors\r\nlet GoogleMap, MyMarker, MyGeocoder, MyInfoWindow;\r\n\r\nexport default class MapContainer extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markerPosition: initialLocation,\r\n      searchKeyword: \"\",\r\n      clientLocation: null,\r\n      selectedLocation: initialLocation,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Requesting data from google map server\r\n    GoogleMapLoader.load().then(() => {\r\n      //Initialize the map with default arguments\r\n      GoogleMap = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n        center: initialLocation,\r\n        zoom: 15,\r\n      });\r\n      //Pin a marker at initial location\r\n      MyMarker = new window.google.maps.Marker({\r\n        position: this.state.markerPosition,\r\n        map: GoogleMap,\r\n      });\r\n      //Add a click event to markers to control invisibility of info windows\r\n      MyMarker.addListener(\"click\", () => {\r\n        MyInfoWindow.open(GoogleMap, MyMarker);\r\n      });\r\n\r\n      //Create instances of Geocoder and Info Window and initialize them.\r\n      MyGeocoder = new window.google.maps.Geocoder();\r\n      MyInfoWindow = new window.google.maps.InfoWindow({\r\n        content: \"2 Lansing Square #700, North York, ON M2J 4P8, Canada\",\r\n      });\r\n      //Open info window by default\r\n      MyInfoWindow.open(GoogleMap, MyMarker);\r\n    });\r\n    //Get client location information from navigator\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        this.setState({\r\n          clientLocation: {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          },\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  //Triggered when search button is clicked\r\n  onSearchClick = () => {\r\n    if (this.state.searchKeyword !== \"\") {\r\n      //Clear existed markers\r\n      MyMarker.setMap(null);\r\n      //Request details about keyword searched\r\n      MyGeocoder.geocode(\r\n        {\r\n          address: this.state.searchKeyword,\r\n        },\r\n        (results, status) => {\r\n          // if status is ok, create a new marker according to coordinates obtained from geocoder, relocate to the place, and open a info window by default\r\n          if (status === \"OK\") {\r\n            MyMarker = new window.google.maps.Marker({\r\n              position: results[0].geometry.location,\r\n              map: GoogleMap,\r\n            });\r\n            GoogleMap.setCenter(results[0].geometry.location);\r\n            MyInfoWindow = new window.google.maps.InfoWindow({\r\n              content: results[0].formatted_address,\r\n            });\r\n            MyInfoWindow.open(GoogleMap, MyMarker);\r\n            this.setState({\r\n              selectedLocation: {\r\n                lat: results[0].geometry.location.lat(),\r\n                lng: results[0].geometry.location.lng(),\r\n              },\r\n            });\r\n          } else {\r\n            alert(\r\n              \"Didn't get response about current keyword from google map server. Please check you network or change another keyword and try again.\"\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  onKeyUpHandler = (e) => {\r\n    if (e.keyCode === 13) {\r\n      this.onSearchClick();\r\n    }\r\n  };\r\n\r\n  //onChange event to monitor the variation of value in the input box\r\n  onSearchKeywordChange = (e) => {\r\n    this.setState({\r\n      searchKeyword: e.target.value,\r\n    });\r\n  };\r\n\r\n  //\r\n  onYourLocationClick = () => {\r\n    MyMarker.setMap(null);\r\n    //Request for details about client location.\r\n    MyGeocoder.geocode(\r\n      {\r\n        latLng: this.state.clientLocation,\r\n      },\r\n      (result, status) => {\r\n        if (status === \"OK\") {\r\n          //Center the map at client location\r\n          GoogleMap.setCenter(this.state.clientLocation);\r\n          this.setState({\r\n            selectedLocation: this.state.clientLocation,\r\n          });\r\n          //Create a new marker on client location\r\n          MyMarker = new window.google.maps.Marker({\r\n            position: this.state.clientLocation,\r\n            map: GoogleMap,\r\n          });\r\n          //Create a new Info Window about client location, and open it by default\r\n          MyInfoWindow = new window.google.maps.InfoWindow({\r\n            content: `\r\n            <h3>Your Location</h3>\r\n            <p>${result[0].formatted_address}</p>\r\n            `,\r\n          });\r\n          MyInfoWindow.open(GoogleMap, MyMarker);\r\n          //Add a click event to markers to control invisibility of info windows\r\n          MyMarker.addListener(\"click\", () => {\r\n            MyInfoWindow.open(GoogleMap, MyMarker);\r\n          });\r\n        } else {\r\n          alert(\r\n            \"Didn't get response about client location from google map server. Please enable location services on your browser first and try again.\"\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <TimeContainer\r\n          selectedLocation={this.state.selectedLocation}\r\n          myAPIKey={myAPIKey}\r\n        />\r\n        <Map\r\n          mapStyle={mapStyle}\r\n          onSearchClick={this.onSearchClick}\r\n          onSearchKeywordChange={this.onSearchKeywordChange}\r\n        >\r\n          <input\r\n            className={style.search_box}\r\n            type=\"text\"\r\n            onChange={this.onSearchKeywordChange}\r\n            onKeyUp={this.onKeyUpHandler}\r\n          />\r\n          <button className={style.buttons} onClick={this.onSearchClick}>Search</button>\r\n          <button className={style.buttons} onClick={this.onYourLocationClick}>Your Location</button>\r\n          <div>{this.state.utcTime}</div>\r\n        </Map>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","/*\n * @Author: your name\n * @Date: 2020-11-27 16:38:29\n * @LastEditTime: 2020-11-28 23:53:38\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\repository\\accuenergy-coding-test\\src\\App.js\n */\nimport \"./App.scss\";\nimport MapContainer from \"./Components/Map/MapContainer\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"title\">Accuenergy Pre-interview Coding Test</header>\n      <MapContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Author: your name\n * @Date: 2020-11-27 16:38:29\n * @LastEditTime: 2020-11-27 17:33:56\n * @LastEditors: your name\n * @Description: In User Settings Edit\n * @FilePath: \\repository\\accuenergy-coding-test\\src\\index.js\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_group\":\"Map_input_group__2O1aP\",\"search_box\":\"Map_search_box__3x809\",\"buttons\":\"Map_buttons__32xMm\",\"map_wrapper\":\"Map_map_wrapper__1qWPx\"};"],"sourceRoot":""}